import glob
import os

import pandas as pd
from src.common.logger import get_logger

from src.common.etl_builder import ETLBuilder

log = get_logger(__name__)
'''
This ETL 

1. Reads json files generated by events_and_batch_etl and create dataframe
2. list post code ordered by fastest response
3. list highly performed agent of each post_code using rank
'''


class ReportingETl(ETLBuilder):
    def __init__(self, env, config_path=None):
        self.config_path = 'config/reporting_etl_config.yaml' if env == 'dev' else config_path
        self.env = env
        self.input_path = None
        self.reports_path = None
        ETLBuilder.__init__(self, self.env, self.config_path)

    def load_json_as_df(self):
        json_pattern = os.path.join(self.input_path, '*.json')
        file_list = glob.glob(json_pattern)
        dfs = []
        for file in file_list:
            data = pd.read_json(file, lines=True)
            dfs.append(data)
        df = pd.concat(dfs, ignore_index=True)
        return df

    def run_etl(self):
        self.input_path = self.config['input_path']
        self.reports_path = self.config['reports_path']
        log.info(f'''Data Read from {self.input_path}''')
        input_df = self.load_json_as_df()
        input_df['ImplementedDate'] = pd.to_datetime(input_df['ImplementedDate'], format='%d/%m/%Y %H:%M')
        input_df['RequestDate'] = pd.to_datetime(input_df['RequestDate'], format='%d/%m/%Y %H:%M')

        input_df['Implemented_Date'] = pd.to_datetime(input_df['ImplementedDate']).dt.date
        input_df['Request_Date'] = pd.to_datetime(input_df['RequestDate']).dt.date

        input_df['Response'] = (input_df['Implemented_Date'] - input_df['Request_Date']).dt.days

        response_order_df = input_df.sort_values(by='Response', na_position='first')
        response_order_df[['PostCode', 'Response']].to_csv(f'''{self.reports_path}/post_code_response.csv''',
                                                           index=False)

        log.info(f'''post code list report path {self.reports_path}/post_code_response.csv''')
        input_df['Rank'] = input_df.groupby('PostCode')['$Amount'].rank(method="first", ascending=False).astype(int)

        output = input_df[['AgentID', 'PostCode', '$Amount', 'Rank']]

        final_output = output[(output.Rank == 1)][['AgentID', 'PostCode', '$Amount']]
        final_output.to_csv(f'''{self.reports_path}/top_agent.csv''', index=False)

        log.info(f'''Top agent report path {self.reports_path}/top_agent.csv''')
